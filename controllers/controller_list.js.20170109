var mongoose = require( 'mongoose' );
var User = mongoose.model('User');
var Favorite = mongoose.model('Favorite');
var Contact = mongoose.model('Contact');

var custMsg = require( '../models/custom_msg' );
var logger = require('../lib/appLogger');
var util = require('../lib/util');

//////////////////////////////////////////////////
//                                              //
//    매칭 케이스별 범위 및 판정값 표 - START   //
//                                              //
//////////////////////////////////////////////////

// REDIS 검색시 기본 거리값(km)
var baseDistance = 30;
// REDIS 검색시 기본 검색결과 갯수값
var baseRedisCnt = 70;

var standard_commute_salary = 10000;
var standard_resident_salary = 1900000;

// ** 매칭 알고리즘 판정 테이블 **
//        부모    =>    [시터] 
// 1. [통근/재택] => [통근/재택]
var distTable_sitter_commute_commute = [0, 0.5, 2, 5, 10, 15, 20, 30];
var distValue_sitter_commute_commute = [10,9.5, 9, 8,6.5,  5,  3,  1];
var salTable_sitter_commute_commute = [-10000,-5000,-2000,0,1000,2000,3000,5000,7000,10000];
var salValue_sitter_commute_commute = [10,        9,    8,7,   6,   5,   4,   3,   2,    1];
var rate_sitter_commute_commute = [7,2,1]; // 비중도 : 1.스케쥴, 2.거리, 3.시급
// 2.    [입주]   =>   [입주]
var distTable_sitter_resident_resident = [0, 500];
var distValue_sitter_resident_resident = [10,  0];	
var salTable_sitter_resident_resident = [-1000000,-500000,-200000,0,100000,200000,300000,500000,700000,1000000];
var salValue_sitter_resident_resident = [10,            9,      8,7,     6,     5,     4,     3,     2,      1];
var rate_sitter_resident_resident = [4,2,4];
// 3. [통근/재택] =>   [입주]
var distTable_sitter_commute_resident = [0, 0.5, 2, 5, 10, 15, 20, 30];
var distValue_sitter_commute_resident = [10,9.5, 9, 8,6.5,  5,  3,  1];
var salTable_sitter_commute_resident = salTable_sitter_resident_resident;
var salValue_sitter_commute_resident = salValue_sitter_resident_resident;
var rate_sitter_commute_resident = [7,2,1];
// 4.    [입주]   => [통근/재택] 
var distTable_sitter_resident_commute = [0, 0.5, 2, 5, 10, 15, 20, 30];
var distValue_sitter_resident_commute = [10,9.5, 9, 8,6.5,  5,  3,  1];
var salTable_sitter_resident_commute = salTable_sitter_commute_commute;
var salValue_sitter_resident_commute = salValue_sitter_commute_commute;
//var salTable_sitter_resident_commute = [-10000,-5000,-2000,0,1000,2000,3000,5000,7000,10000];
//var salValue_sitter_resident_commute = [10,        9,    8,7,   6,   5,   4,   3,   2,    1];
var rate_sitter_resident_commute = [4,4,2];

//        시터    =>    [부모] 
// 1. [통근/재택] => [통근/재택]
var distTable_parent_commute_commute = [0, 0.5, 2, 5, 10, 15, 20, 30];
var distValue_parent_commute_commute = [10,9.5, 9, 8,6.5,  5,  3,  1];
var salTable_parent_commute_commute = [-10000, 10000];
var salValue_parent_commute_commute = [0,         10];
var rate_parent_commute_commute = [4,4,2]; // 비중도 : 1.스케쥴, 2.거리, 3.시급
// 2.    [입주]   =>   [입주]
var distTable_parent_resident_resident = [0, 0.5, 2, 5, 10, 15, 20, 30];
var distValue_parent_resident_resident = [11,9.5, 9, 8,6.5,  5,  3,  1];	
var salTable_parent_resident_resident = [-1000000, 1000000];
var salValue_parent_resident_resident = [0,             10];
var rate_parent_resident_resident = [0,3,7];
// 3. [통근/재택] =>   [입주]
var distTable_parent_commute_resident = [0, 0.5, 2, 5, 10, 15, 20, 30];
var distValue_parent_commute_resident = [10,9.5, 9, 8,6.5,  5,  3,  1];
var salTable_parent_commute_resident = salTable_parent_resident_resident;
var salValue_parent_commute_resident = salValue_parent_resident_resident;
var rate_parent_commute_resident = [0,7,3];
// 4.    [입주]   => [통근/재택] 
var distTable_parent_resident_commute = [0, 0.5, 2, 5, 10, 15, 20, 30];
var distValue_parent_resident_commute = [10,9.5, 9, 8,6.5,  5,  3,  1];
var salTable_parent_resident_commute = [-10000,-5000,-2000,0,1000,2000,3000,5000,7000,10000];
var salValue_parent_resident_commute = [10,        9,    8,7,   6,   5,   4,   3,   2,    1];
var rate_parent_resident_commute = [4,4,2];

//////////////////////////////////////////////////
//                                              //
//    매칭 케이스별 범위 및 판정값 표 - END     //
//                                              //
//////////////////////////////////////////////////

exports.getListByParentEmail = function(req, res){
	getMatchingListByEmail(100, req, res);
}

exports.getListBySitterEmail = function(req, res){
	getMatchingListByEmail(100, req, res);
}

getMatchingListByEmail = function(listCnt, req, res, secondSearch, result_one){

	logger.info(req, 'Try to find a certain users within the given distance - start');

	// For GPS calculation
        var redis = require('redis');                                   //add for Redis support
        var redisc = redis.createClient(6379, '127.0.0.1');                     //connect to Redis

        redisc.on('error', function(err) {
                logger.error(req, 'Error ' + err);
        });

        var geo = require('georedis').initialize(redisc, {nativeGeo: true});

	// 조회주체의 정보를 조회한다.
	var query = User.findOne({"personal_info.email":req.params.email}, function(err, user){
                logger.info(req, 'Try to find all users - finish');
		if(err) {
			logger.error(req, err);
			return res.status(500).send(""+err);
		} else if(user==null) {
			logger.error(req, 'No email found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		} else if(user.personal_info.lng==null || user.personal_info.lat==null) {
			logger.error(req, 'No GPS Infomation found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		}

		var options = {
		    withCoordinates: false, // Will provide coordinates with locations, default false
		    withHashes: false, // Will provide a 52bit Geohash Integer, default false
		    withDistances: true, // Will provide distance from query, default false
		    order: 'ASC', // or 'DESC' or true (same as 'ASC'), default false
		    units: 'km', // or 'km', 'mi', 'ft', default 'm'
		    count: baseRedisCnt, // Number of results to return, default undefined
		    accurate: true // Useful if in emulated mode and accuracy is important, default false
		};

		if (user.sitter_info==undefined || user.parent_info==undefined) {
			logger.error(req, 'No Commute type value found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));

		}

		var sort = (req.params.sort==null)?"point":req.params.sort;

		// 검색대상 회원구분값 세팅 : 시터 -> 부모 OR 부모 -> 시터
		var myGubunStr = util.getTypeStr(user, "MY"); //조회주체 구분값 문자열
		var searchGubunStr = util.getTypeStr(user, "OPPOSITE"); //조회대상 구분값 문자열

		// 출퇴근 타입 - myCommuteStr : 내가 설정한 출퇴근 타입, searchCommuteStr : 검색할 출퇴근 타입
		var myCommuteStr = util.getCommuteStr(user, "MY");
		var searchCommuteStr = (secondSearch==null)?
					util.getCommuteStr(user, "MY"):util.getCommuteStr(user, "OPPOSITE");

		// 레디스 조회대상 집합군 정의
		var people = geo.addSet(util.getRedisStr(user, (secondSearch==null)?"MATCH1":"MATCH2"));

logger.info(req, 'Gubun Value : ', searchGubunStr + "_" + searchCommuteStr);

		// 조회 한계거리 설정 : 출퇴근 경우는 baseDistance값을, 입주일 경우엔 한국전체를 거리로 설정
		var distance = (searchCommuteStr=="commute")?baseDistance:1000;

		// 레디스를 통한 거리내 조회대상 검색실행
		people.nearby( { latitude: user.personal_info.lat, longitude: user.personal_info.lng}, 
				distance, options, function(err, people){

			if(err) {
				logger.error(req, err)
                        	return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
			} else {
				var keys = Object.keys(people.locationSet);
//				var list = Object.values(people.locationSet);

				logger.info(req, 'people list:', keys.length);
//				logger.info(req, 'people list:', people.locationSet.gettest4429@test.com]);
//				logger.info(req, 'people list:', list);

				query = User.find({"personal_info.email":{"$in":keys}}, function(err, users){
					if(err) {
						logger.error(req, err)
                        			return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
					} else if(users==null) {
						logger.error(req, custMsg.getMsg("NOT_FOUND"));
                        			return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
					} else {
//						logger.info(req, 'people nearby:', users+"");
						var sort = (req.params.sort==null)?"point":req.params.sort;

						// 매칭 알고리즘 적용을 위한 함수 호출
						getMatchList(user, users, listCnt, people.locationSet, myGubunStr, searchGubunStr, myCommuteStr, searchCommuteStr, sort, req, res, secondSearch, result_one);

					}
				});
			}
		})
	});

};


// user : 조회사용자, users : 가까운 시터목록, listCnt : 조회갯수, objDistance : email,distance 객체, sortGubun : 정렬기준
var getMatchList = function(user, users, listCnt, objDistance, myGubunStr, searchGubunStr, myCommuteStr, searchCommuteStr, sortGubun, req, res, secondSearch, result_one) {

	logger.info(req, "[MATCHING CASE] Searching from ["+myGubunStr+"]");
	logger.info(req, "[MATCHING CASE] Searching for ["+searchGubunStr+"], From ["+myCommuteStr+"] to ["+searchCommuteStr+"]");

	// 출퇴근 유형 값이 없는 경우 에러
	if(myCommuteStr==undefined) {
		logger.error(req, 'Matching is not possible...');
		return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
	}

	var result = [];

	var week = ["mon","tue","wed","thu","fri","sat","sun"];

	// 매칭구분에 맞는 매칭테이블 값 설정
	var scheduleRate = (eval("rate_"+searchGubunStr+"_"+myCommuteStr+"_"+searchCommuteStr))[0];
	var distRate = (eval("rate_"+searchGubunStr+"_"+myCommuteStr+"_"+searchCommuteStr))[1];
	var salaryRate = (eval("rate_"+searchGubunStr+"_"+myCommuteStr+"_"+searchCommuteStr))[2];

	var distTable = eval("distTable_"+searchGubunStr+"_"+myCommuteStr+"_"+searchCommuteStr);
	var distValue = eval("distValue_"+searchGubunStr+"_"+myCommuteStr+"_"+searchCommuteStr);
	var salTable = eval("salTable_"+searchGubunStr+"_"+myCommuteStr+"_"+searchCommuteStr);
	var salValue = eval("salValue_"+searchGubunStr+"_"+myCommuteStr+"_"+searchCommuteStr);

	var targetCnt, matchCnt;

	var today = new Date();
	var thisYear = today.getFullYear();
	var thisDate = (today.getMonth()+1)*100+today.getDate();

	sortGubun = (sortGubun==null)?"point":sortGubun;

	logger.info(req, 'people number:', users.length);
//	logger.info(req, 'thisYear:', thisYear);
//	logger.info(req, 'thisDate:', thisDate);

	var favoriteList = [];

	var query = Favorite.find({"email":req.params.email}, function(err, favorites){
		logger.info(req, 'Try to find all users - finish');
		if(err) {
			logger.error(req, err);
		} else if(favorites==null) {
			logger.error(req, 'No favorite list found...');
		} else {
                        for (var i=0; i<favorites.length; i++) {
                        	favoriteList.push(favorites[i].favorite_email);
//				logger.info(req, 'favorite_email['+favorites[i].favorite_email+"]");
			}
		}

//		logger.info(req, "favoriteList length["+favoriteList.length+"]");

		// 대상에 대한 매칭 작업
		for (var i=0;i<users.length;i++) {
/*
			logger.info(req, "user["+users[i].personal_info.email+"]");
			logger.info(req, "user["+users[i].sitter_info.commute_type+"]");
*/
			targetCnt=0.0;
			matchCnt=0.0;

			// 리스트 객체 생성
			var currentUser = {
				email:users[i].personal_info.email,
				name:users[i].personal_info.name,
				img:(users[i].image_info.prf_img_url==undefined)?
					"https://siso4u.net/images/prf/nisclan1480031777958@hotmail.com.jpg":
					"https://siso4u.net/images/"+(users[i].image_info.prf_img_url).substring((users[i].image_info.prf_img_url).indexOf("prf")),
				age:0,
				brief:eval("users[i]."+searchGubunStr+"_info.brief"),
				addr:users[i].personal_info.addr1,
				commute:eval("users[i]."+searchGubunStr+"_info.commute_type"),
				children:eval("users[i]."+searchGubunStr+"_info.children_info"),
				testimonialCnt:users[i].personal_info.testimonial_count,
				favorite:"N",
				contactStatus:9,
				distance:0,
				distPoint:0,
				timeMatch:0,
				salary:eval("users[i]."+searchGubunStr+"_info.salary"),
				salaryPoint:0,
				point:0
			};
/*
		var currentUser = {
			email:users[i].personal_info.email,
			name:users[i].personal_info.name,
			addr:users[i].personal_info.addr1,
			age:0,
			timeMatch:0,
			distance:0,
			distPoint:0,
			salary:users[i].parent_info.salary,
			point:0
		};
*/
			var age = thisYear - Math.floor(users[i].personal_info.birth_date/10000);
			if (thisDate<users[i].personal_info.birth_date%1000) age--;
			currentUser.age = age;

			for (var y=0;y<favoriteList.length;y++) {
				if (currentUser.email==favoriteList[y]) {
					currentUser.favorite = "Y";
					break;
				}
			}

//			currentUser.distance = objDistance.get(users[i].personal_info.email);


//////////////////////////////////////////////////////////////
//              1. 스케쥴 점수 판정                         //
//////////////////////////////////////////////////////////////

			// 각 요일별 스케쥴 매칭율 산정
			if ( scheduleRate != 0 ) { // 스케쥴 비중이 0일 경우 산정 안함
				for (var y=0;y<week.length;y++) {
					// 각 시간별 스케쥴 매칭율 산정
					for (var z=0;z<7;z++) {
/*
logger.info(req, 'schedule String : ', eval("user."+myGubunStr+"_info."+week[y]));
logger.info(req, 'schedule String : ', eval("users["+i+"]."+searchGubunStr+"_info."+week[y]));
logger.info(req, 'schedule String : ', eval("user.parent_info."+week[y]).charAt(z) );
*/

						// 조회 주체의 스케쥴 값이 1일 경우 조회 상태의 스케쥴 값이 1이면 매칭, 0이면 비매칭
						if (eval("user."+myGubunStr+"_info."+week[y]).charAt(z)=='1') {
							targetCnt++;
							if (eval("users["+i+"]."+searchGubunStr+"_info."+week[y]).charAt(z)=='1') matchCnt++;
						}
					}
				}
/*
logger.info(req, 'matchCnt:', matchCnt);
logger.info(req, 'targetCnt:', targetCnt);
*/
				// 조회 주체의 전체 산정대상 대비 조회 상대의 매칭 비율값 산정
				currentUser.timeMatch = (matchCnt/targetCnt) * 10;
				currentUser.point += currentUser.timeMatch * scheduleRate;
			}

//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//              2. 거리 점수 판정                           //
//////////////////////////////////////////////////////////////

			if ( distRate != 0 ) { // 거리 비중이 0일 경우 산정 안함
				currentUser.distance = (objDistance[users[i].personal_info.email]).distance.toFixed(2);

				for (var y=0;y<distTable.length;y++) 
					if (currentUser.distance < distTable[y]) {
						currentUser.distPoint = distValue[y-1] - (((currentUser.distance-distTable[y-1])/(distTable[y]-distTable[y-1]))*(distValue[y-1]-distValue[y]));
						currentUser.point +=  currentUser.distPoint * distRate;
						break;
					}
			}

//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//              3. 급여 점수 판정                           //
//////////////////////////////////////////////////////////////

//logger.info(req, "salary["+ eval("user."+myGubunStr+"_info.salary")+"]");
//
			// 둘중 하나의 급여정보가 협의일 경우 급여동일로 판단
			if ( currentUser.salary==0 || eval("user."+myGubunStr+"_info.salary")==0 || salaryRate==0 ) 
				currentUser.point += 7 * salaryRate;
			else {
				var salaryGap = currentUser.salary - eval("user."+myGubunStr+"_info.salary");

				if ( myCommuteStr!=searchCommuteStr ) // 근무유형이 다른 경우 해당급여의 중간값 설정
					salaryGap = currentUser.salary - eval("standard_"+searchCommuteStr+"_salary");

				for (var y=0;y<salTable.length;y++) 
					if (salaryGap < salTable[y]) {
						currentUser.salaryPoint = salValue[y-1] - (((salaryGap-salTable[y-1])/(salTable[y]-salTable[y-1]))*(salValue[y-1]-salValue[y]));
						currentUser.point += currentUser.salaryPoint * salaryRate;
						break;
					}
/*
					if (salaryGap < salTable[y]) {
						currentUser.salaryPoint = salValue[y-1] - (((salaryGap-salTable[y-1])/(salTable[y]-salTable[y-1]))*(salValue[y-1]-salValue[y]));
						currentUser.point += currentUser.salaryPoint * salaryRate;
						break;
					}
*/
			}

//////////////////////////////////////////////////////////////

		// 산정된 조회 결과를 조회 리스트에 추가
			result.push(currentUser);
		}


		// Sort before sending list to the client
		if ( secondSearch == null ) {
			if (result.length < listCnt) 
				getMatchingListByEmail(listCnt-result.length, req, res, "true", sortList(result, sortGubun, result.length));
			else {
				return res.status(200).json({group_first:sortList(result, sortGubun, listCnt)});
			}
		} else {
/*
			var result_obj = [result_one, sortList(result, sortGubun, listCnt)];
			return res.status(200).json(result_obj);
*/
//			return res.status(200).json(new Array(result_one, sortList(result, sortGubun, listCnt)));
			return res.status(200).json({group_first:result_one, group_second:sortList(result, sortGubun, listCnt)});
		}
	});
}


exports.getSitterCountByParentEmail = function(req, res){

	getCountByEmail(30, req, res);

}

exports.getParentCountBySitterEmail = function(req, res){

	getCountByEmail(30, req, res);

}

// gubun : 시터/부모 구분, distance : 최대거리제한
getCountByEmail = function(distance, req, res){

	var resultCnt = 0;

	logger.info(req, 'Try to find a certain users within the given distance - start');

	// For GPS calculation
        var redis = require('redis');                                   //add for Redis support
        var redisc = redis.createClient(6379, '127.0.0.1');                     //connect to Redis

        redisc.on('error', function(err) {
                logger.error(req, 'Error ' + err);
        });

        var geo = require('georedis').initialize(redisc, {nativeGeo: true});

	var query = User.findOne({"personal_info.email":req.params.email}, function(err, user){

//		logger.info(req, 'Try to find user for counting people nearby : ' + req.params.email);

		if(err) {
			logger.error(req, err);
			return res.status(500).send(""+err);
		} else if(user==null) {
			logger.error(req, 'Count by email : No email found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		} else if(user.personal_info.lng==null || user.personal_info.lat==null) {
			logger.error(req, 'No GPS Infomation found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		}

		var options = {
		    withCoordinates: false, // Will provide coordinates with locations, default false
		    withHashes: false, // Will provide a 52bit Geohash Integer, default false
		    withDistances: false, // Will provide distance from query, default false
		    units: 'km', // or 'km', 'mi', 'ft', default 'm'
		//    count: 10, // Number of results to return, default undefined
		    accurate: true // Useful if in emulated mode and accuracy is important, default false
		};

		logger.info(req, "GPS Position : " + user.personal_info.lat + ", " + user.personal_info.lng);

		// 1. 출퇴근/재택 유형 숫자 카운트
		var people = geo.addSet(util.getTypeStr(user,"OPPOSITE")+"_commute");

		people.nearby( { latitude: user.personal_info.lat, longitude: user.personal_info.lng}, 
				distance, options, function(err, people){
			if(err) {
				logger.error(req, err)
				return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
			} else {
				var keys = Object.keys(people.locationSet);
//				logger.info(req, 'people nearby:', keys);
				logger.info(req, "people count:" + keys.length);
				resultCnt += keys.length;

				// 2. 입주형 유형 숫자 카운트
				people = geo.addSet(util.getTypeStr(user,"OPPOSITE")+"_resident");

				people.nearby( { latitude: user.personal_info.lat, longitude: user.personal_info.lng}, 
						distance, options, function(err, people){
					if(err) {
						logger.error(req, err)
					        return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
					} else {
						keys = Object.keys(people.locationSet);
			//			logger.info(req, 'people nearby:', keys);
						logger.info(req, "people count:" + keys.length);
						resultCnt += keys.length;

		                        	return res.status(200).json({count:resultCnt});
					}
				});
			}
		})
	});
}



exports.getFavoriteListByParentEmail = function(req, res){
        getListByEmail("fav", req, res);
}

exports.getReqListByParentEmail = function(req, res){
        getListByEmail("req", req, res);
}

exports.getRcvListByParentEmail = function(req, res){
        getListByEmail("rcv", req, res);
}

exports.getFavoriteListBySitterEmail = function(req, res){
        getListByEmail("fav", req, res);
}

exports.getReqListBySitterEmail = function(req, res){
        getListByEmail("req", req, res);
}

exports.getRcvListBySitterEmail = function(req, res){
        getListByEmail("rcv", req, res);
}


getListByEmail = function(listGubun, req, res){

	logger.info(req, 'Search List...');

/*
	// For GPS calculation
        var redis = require('redis');                                   //add for Redis support
        var redisc = redis.createClient(6379, '127.0.0.1');                     //connect to Redis

        redisc.on('error', function(err) {
                logger.error(req, 'Error ' + err);
        });

        var geo = require('georedis').initialize(redisc, {nativeGeo: true});
*/

	var query = User.findOne({"personal_info.email":req.params.email}, function(err, user){
                logger.info(req, 'Try to find all users - finish');
		if(err) {
			logger.error(req, err);
			return res.status(500).send(""+err);
		} else if(user==null) {
			logger.error(req, 'No email found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		} else if(user.personal_info.lng==null || user.personal_info.lat==null) {
			logger.error(req, 'No GPS Infomation found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		}


					
//		var people = geo.addSet(searchGubunStr+"_"+searchCommuteStr);

		var destCollection = (listGubun=="fav")?Favorite:Contact;
		var queryCondition = (listGubun=="fav")?{"email":req.params.email}:((listGubun=="req")?{"req_email":req.params.email}:{"rcv_email":req.params.email});

		query = destCollection.find(queryCondition, function(err, result){
	                logger.info(req, 'Try to find all users - finish');
			if(err) {
				logger.error(req, err);
	       	                return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
			} else if(result==null) {
				logger.error(req, 'No favorite list found...');
	       	                return res.status(500).send(custMsg.getMsg("NO_FAVORITE"));
			} 

			var listEmail = new Array();

			for (var i=0; i<result.length; i++) {
				if (listGubun=="fav")
					listEmail.push(result[i].favorite_email);
				else if (listGubun=="req")
					listEmail.push(result[i].rcv_email);
				else if (listGubun=="rcv")
					listEmail.push(result[i].req_email);
			}

			logger.info(req, "listEmail="+listEmail);
			logger.info(req, "result="+result);
			logger.info(req, "result.req_email="+result.req_email);
//logger.info(req, 'Gubun Value : ', searchGubunStr + "_" + searchCommuteStr);

			query = User.find({"personal_info.email":{"$in":listEmail}}, function(err, users){
				if(err) {
					logger.error(req, err)
                        		return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
				} else if(users==null) {
					logger.error(req, custMsg.getMsg("NOT_FOUND"));
                        		return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
				} else {
//					logger.info(req, 'people nearby:', users+"");
					var sort = (req.params.sort==null)?"point":req.params.sort;

					if (listGubun=="fav") {

                                                query = Contact.find({$or:[{"req_email":{"$in":listEmail},"rcv_email":user.personal_info.email}, {"rcv_email":{"$in":listEmail}, "req_email":user.personal_info.email}], "status":{"$in":[0,1]}}, function(err, contacts){
                                                        logger.info(req, 'Try to find all users - finish');
                                                        if(err) {
                                                                logger.error(req, err);
                                                                return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
                                                        } else if(contacts==null) {
                                                                logger.info(req, 'No contacts list found...');
								contacts = [];
                                                        }

                                                        makeUserList(listGubun, req, res, user, users, result, contacts);
                                                });
					} else {

						query = Favorite.find({"email":req.params.email}, function(err, favorites){
					                logger.info(req, 'Try to find all users - finish');
							if(err) {
								logger.error(req, err);
					       	                return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
							} else if(favorites==null) {
								logger.error(req, 'No favorite list found...');
								favorites = [];
							} 

							makeUserList(listGubun, req, res, user, users, result, favorites);
						});
					}
				}

			});
		})
	});
};


var makeUserList = function(listGubun, req, res, user, users, result, subResult) {

	// 검색대상 회원구분값 세팅 : 시터 -> 부모 OR 부모 -> 시터
	var myGubunStr = util.getTypeStr(user, "MY"); //조회주체 구분값 문자열
	var searchGubunStr = util.getTypeStr(user, "OPPOSITE"); //조회대상 구분값 문자열

	var userList = [];

	var today = new Date();
	var thisYear = today.getFullYear();
	var thisDate = (today.getMonth()+1)*100+today.getDate();

	logger.info(req, 'people number:', users.length);

	// 결과 리스트 작성
	for (var i=0;i<users.length;i++) {

		// 리스트 객체 생성
		var currentUser = {
			email:users[i].personal_info.email,
			name:users[i].personal_info.name,
                        img:(users[i].image_info.prf_img_url==undefined)?
                        	"http://siso4u.net/images/prf/nisclan1480031777958@hotmail.com.jpg":
                        	users[i].image_info.prf_img_url,
			age:0,
			brief:eval("users[i]."+searchGubunStr+"_info.brief"),
			addr:users[i].personal_info.addr1,
			salary:eval("users[i]."+searchGubunStr+"_info.salary"),
			commute:eval("users[i]."+searchGubunStr+"_info.commute_type"),
			children:eval("users[i]."+searchGubunStr+"_info.children_info"),
			testimonialCnt:users[i].personal_info.testimonial_count,
			favorite:"N",
			favRegDate:"",
			reqEmail:"",
			rcvEmail:"",
			contactStatus:9,
			contactId:"",
			reqDate:"",
			cancelDate:"",
			readDate:"",
			answDate:"",
			distance:0
		};

		// 관심등록 리스트
		if (listGubun=="fav") {
			currentUser.favorite = "Y";

			for (var j=0;j<result.length;j++) {
				if (result[j].favorite_email==currentUser.email) {
					currentUser.favRegDate = (result[j].sys_reg_date==null)?"":result[j].sys_reg_date.getTime();
//					currentUser.favSysRegDate = (result[j].sys_reg_date==null)?"":result[j].sys_reg_date;
					break;
				}
			}

			// subResult = 연락처요청 리스트
			for (var j=0;j<subResult.length;j++)
				if (subResult[j].req_email==currentUser.email
					|| subResult[j].rcv_email==currentUser.email) {

					currentUser.contactStatus = subResult[j].status;
					currentUser.reqDate = (subResult[j].sys_req_date==null)?"":subResult[j].sys_req_date.getTime();
					currentUser.cancelDate = (subResult[j].sys_cancel_date==null)?"":subResult[j].sys_cancel_date.getTime();
					currentUser.readDate = (subResult[j].sys_read_date==null)?"":subResult[j].sys_read_date.getTime();
					currentUser.answDate = (subResult[j].sys_answ_date==null)?"":subResult[j].sys_answ_date.getTime();
					currentUser.reqEmail = subResult[j].req_email;
					currentUser.rcvEmail = subResult[j].rcv_email;
					currentUser.contactId = subResult[j]._id;
					break;
				}
		// 연락처 요청/수신 리스트
		} else {
			for (var j=0;j<result.length;j++) {
				if (result[j].req_email==currentUser.email
					|| result[j].rcv_email==currentUser.email) {

					currentUser.contactStatus = result[j].status;
					currentUser.reqDate = (result[j].sys_req_date==null)?"":result[j].sys_req_date.getTime();
					currentUser.cancelDate = (result[j].sys_cancel_date==null)?"":result[j].sys_cancel_date.getTime();
					currentUser.readDate = (result[j].sys_read_date==null)?"":result[j].sys_read_date.getTime();
					currentUser.answDate = (result[j].sys_answ_date==null)?"":result[j].sys_answ_date.getTime();
					currentUser.reqEmail = result[j].req_email;
					currentUser.rcvEmail = result[j].rcv_email;
					currentUser.contactId = result[j]._id;
					break;
				}
			}

			// subResult = 관심등록 리스트
			for (var j=0;j<subResult.length;j++) {
				if (subResult[j].favorite_email==currentUser.email) {
					currentUser.favorite = "Y";
					currentUser.favRegDate = (subResult[j].sys_reg_date==null)?"":subResult[j].sys_reg_date.getTime();
					break;
				}
			}
		}

		var age = thisYear - Math.floor(users[i].personal_info.birth_date/10000);
		if (thisDate<users[i].personal_info.birth_date%1000) age--;
		currentUser.age = age;

		currentUser.distance = getDistance(user.personal_info.lat, user.personal_info.lng, users[i].personal_info.lat, users[i].personal_info.lng);

		userList.push(currentUser);
	}

	var sortGubun = (req.params.sort==null)?listGubun:req.params.sort;

	// Sort before sending list to the client
	return res.status(200).json({group_first:sortList(userList, sortGubun, userList.length)});
};


var sortList = function(list, sortGubun, listCnt) {
	// Sort before sending list to the client
	// SORT VALUE FOR MATCH LIST
	if ( sortGubun=="point") 		// Point first
		list.sort(function (a,b) {return b.point - a.point});
	else if ( sortGubun=="distance") 	// Nearest first
		list.sort(function (a,b) {return a.distance - b.distance});
	else if ( sortGubun=="salaryHigh") 	// Highest first
		list.sort(function (a,b) {return b.salary - a.salary});
	else if ( sortGubun=="salaryLow") 	// Cheapest first
		list.sort(function (a,b) {return a.salary - b.salary});
	// SORT VALUE FOR FAV/REQ/RCV LIST
	else if ( sortGubun=="fav") 	
		list.sort(function (a,b) {return b.favRegDate - a.favRegDate});
	else if ( sortGubun=="req") 	
		list.sort(function (a,b) {return b.reqDate - a.reqDate});
	else if ( sortGubun=="rcv") 	
		list.sort(function (a,b) {return b.reqDate - a.reqDate});
	else				// Best Match - point first
		list.sort(function (a,b) {return b.point - a.point});

	return list.slice(0,listCnt);
}

//Generates hash using bCrypt
var createHash = function(password){
	return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);
};

//This function takes in latitude and longitude of two location and returns the distance between them as the crow flies (in km)
function getDistance(lat1, lon1, lat2, lon2) 
{
	var R = 6371; // km
	var dLat = toRad(lat2-lat1);
	var dLon = toRad(lon2-lon1);
	var lat1 = toRad(lat1);
	var lat2 = toRad(lat2);

	var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); 
	var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
	var d = R * c;
	return d.toFixed(2);
}

// Converts numeric degrees to radians
function toRad(Value) 
{
	return Value * Math.PI / 180;
};
