var mongoose = require( 'mongoose' );
var User = mongoose.model('User');
var custMsg = require( '../models/custom_msg' );
var logger = require('../lib/wlogger');

exports.getSitterCountByParentEmail = function(req, res){

	return getCountByEmail('sitters_commute', 30, req, res) + getCountByEmail('sitters_resident', 30, req, res);

}

exports.getParentCountBySitterEmail = function(req, res){

	return getCountByEmail('parent_commute', 30, req, res) + getCountByEmail('parent_resident', 30, req, res);

}

// gubun : 시터/부모 구분, distance : 최대거리제한
getCountByEmail = function(gubun, distance, req, res){

	logger.info('Try to find a certain users within the given distance - start');

	// For GPS calculation
        var redis = require('redis');                                   //add for Redis support
        var redisc = redis.createClient(6379, '127.0.0.1');                     //connect to Redis

        redisc.on('error', function(err) {
                logger.error('Error ' + err);
        });

        var geo = require('georedis').initialize(redisc, {nativeGeo: true});

	var people = geo.addSet(gubun);

	var query = User.findOne({"personal_info.email":req.params.email}, function(err, user){

//		logger.info('Try to find user for counting people nearby : ' + req.params.email);

		if(err) {
			logger.error(err);
			return res.status(500).send(""+err);
		} else if(user==null) {
			logger.error('No email found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		} else if(user.personal_info.lng==null || user.personal_info.lat==null) {
			logger.error('No GPS Infomation found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		}

		var options = {
		    withCoordinates: false, // Will provide coordinates with locations, default false
		    withHashes: false, // Will provide a 52bit Geohash Integer, default false
		    withDistances: false, // Will provide distance from query, default false
		    units: 'km', // or 'km', 'mi', 'ft', default 'm'
		//    count: 10, // Number of results to return, default undefined
		    accurate: true // Useful if in emulated mode and accuracy is important, default false
		};

		people.nearby( { latitude: user.personal_info.lat, 
			longitude: user.personal_info.lng}, distance, options, function(err, people){
				if(err) {
					logger.error(err)
		                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
				} else {
					var keys = Object.keys(people.locationSet);
//					logger.info('people nearby:', keys);
					logger.info('people count:', keys.length);
		                        return res.status(200).json({count:keys.length});
				}
		})
	});
}

exports.getListByParentEmail = function(req, res){

	getListByEmail('sitters', 30, req, res);

}

exports.getListBySitterEmail = function(req, res){

	getListByEmail('parents', 30, req, res);

}

// gubun : 시터/부모 구분, distance : 최대거리제한
getListByEmail = function(gubun, distance, req, res){

	logger.info('Try to find a certain users within the given distance - start');

	// For GPS calculation
        var redis = require('redis');                                   //add for Redis support
        var redisc = redis.createClient(6379, '127.0.0.1');                     //connect to Redis

        redisc.on('error', function(err) {
                logger.error('Error ' + err);
        });

        var geo = require('georedis').initialize(redisc, {nativeGeo: true});

	var people = geo.addSet(gubun);

	var query = User.findOne({"personal_info.email":req.params.email}, function(err, user){
                logger.info('Try to find all users - finish');
		if(err) {
			logger.error(err);
			return res.status(500).send(""+err);
		} else if(user==null) {
			logger.error('No email found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		} else if(user.personal_info.lng==null || user.personal_info.lat==null) {
			logger.error('No GPS Infomation found...');
                        return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
		}

		var options = {
		    withCoordinates: false, // Will provide coordinates with locations, default false
		    withHashes: false, // Will provide a 52bit Geohash Integer, default false
		    withDistances: true, // Will provide distance from query, default false
		    order: 'ASC', // or 'DESC' or true (same as 'ASC'), default false
		    units: 'km', // or 'km', 'mi', 'ft', default 'm'
		    count: 300, // Number of results to return, default undefined
		    accurate: true // Useful if in emulated mode and accuracy is important, default false
		};

		people.nearby( { latitude: user.personal_info.lat, 
			longitude: user.personal_info.lng}, distance, options, function(err, people){

			if(err) {
				logger.error(err)
                        	return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
			} else {
//				logger.info('people nearby:', people.locationSet)


				var keys = Object.keys(people.locationSet);
//				var list = Object.values(people.locationSet);

				logger.info('people list:', keys.length);
//				logger.info('people list:', people.locationSet.gettest4429@test.com]);
//				logger.info('people list:', list);

				query = User.find({"personal_info.email":{"$in":keys}}, function(err, users){
					if(err) {
						logger.error(err)
                        			return res.status(500).send(custMsg.getMsg("SYS_ERROR"));
					} else if(users==null) {
						logger.error(custMsg.getMsg("NOT_FOUND"));
                        			return res.status(500).send(custMsg.getMsg("NOT_FOUND"));
					} else {
//						logger.info('people nearby:', users+"");
						var sort = (req.params.sort==null)?"point":req.params.sort;

						if ( gubun == "sitters" )
							getSitterMatchList(user, users, 100, people.locationSet, sort, req, res);
						else 
							getParentMatchList(user, users, 100, people.locationSet, sort, req, res);

					}
				});
			}
		})
	});

};


// user : 조회사용자, users : 가까운 시터목록, maxCnt : 조회갯수, objDistance : email,distance 객체, sortGubun : 정렬기준
var getSitterMatchList = function(user, users, maxCnt, objDistance, sortGubun, req, res) {

	var result = [];

	var scheduleRate = 7;	// 스케쥴 비중 	70%
	var distRate = 2;	// 거리 비중 	20%
	var salaryRate = 1;	// 시급 비중 	10%

	var week = ["mon","tue","wed","thu","fri","sat","sun"];

	var distTable = [0, 0.5, 2, 5, 10, 15, 20, 30];
	var distValue = [10,9.5, 9, 8,6.5,  5,  3,  1];

	var salTable = [-10000,-5000,-2000,0,1000,2000,3000,5000,7000,10000];
	var salValue = [10,        9,    8,7,   6,   5,   4,   3,   2,    1];

	var targetCnt, matchCnt;

	var today = new Date();
	var thisYear = today.getFullYear();
	var thisDate = (today.getMonth()+1)*100+today.getDate();

	sortGubun = (sortGubun==null)?"point":sortGubun;

	logger.info('people number:', users.length);
//	logger.info('thisYear:', thisYear);
//	logger.info('thisDate:', thisDate);

	for (var i=0;i<users.length;i++) {

		targetCnt=0.0;
		matchCnt=0.0;

		var currentUser = {
			email:users[i].personal_info.email,
			name:users[i].personal_info.name,
//			img:users[i].image_info.prt_img_url,
			img:"http://siso4u.net/images/prf/kyaku76@gmail.com.JPG",
			age:0,
			brief:users[i].sitter_info.brief,
			addr:users[i].personal_info.addr1,
			salary:users[i].sitter_info.salary,
			distance:0,
			distPoint:0,
			timeMatch:0,
			point:0
		};

		var age = thisYear - Math.floor(users[i].personal_info.birth_date/10000);
		if (thisDate<users[i].personal_info.birth_date%1000) age--;
		currentUser.age = age;


//		currentUser.distance = objDistance.get(users[i].personal_info.email);

		for (var y=0;y<week.length;y++) {
			for (var z=0;z<7;z++) {

//logger.info('schedule String : ', eval("user.parent_info."+week[y]));
//logger.info('schedule String : ', eval("users["+i+"].sitter_info."+week[y]));

//logger.info('schedule String : ', eval("user.parent_info."+week[y]).charAt(z) );
				if (eval("user.parent_info."+week[y]).charAt(z)=='1') {
					targetCnt++;
					if (eval("users["+i+"].sitter_info."+week[y]).charAt(z)=='1') matchCnt++;
				}
			}
		}

		currentUser.distance = (objDistance[users[i].personal_info.email]).distance;

		for (var y=0;y<distTable.length;y++) 
			if (currentUser.distance < distTable[y]) {
				currentUser.distPoint = distValue[y-1] - (((currentUser.distance-distTable[y-1])/(distTable[y]-distTable[y-1]))*(distValue[y-1]-distValue[y]));
				currentUser.point +=  currentUser.distPoint * distRate;
				break;
			}

		if ( currentUser.salary == 0 || user.parent_info.salary == 0 ) // 둘중 하나의 시급정보가 협의일 경우 시급동일로 판단
			currentUser.point += 7 * salaryRate;
		else {
			for (var y=0;y<salTable.length;y++) 
				if (currentUser.salary - user.parent_info.salary <= salTable[y]) {
					currentUser.point += salValue[y] * salaryRate;
					break;
				}
		}


//	logger.info('matchCnt:', matchCnt);
//	logger.info('targetCnt:', targetCnt);
		currentUser.timeMatch = (matchCnt/targetCnt) * 10;
		currentUser.point += currentUser.timeMatch * scheduleRate;

		result.push(currentUser);
	}

	// Sort before sending list to the client
	if ( sortGubun=="distance") 	// Nearest first
		result.sort(function (a,b) {return a.distance - b.distance});
	else if ( sortGubun=="salary") 	// Cheapest first
		result.sort(function (a,b) {return a.salary - b.salary});
	else				// Best Match - point first
		result.sort(function (a,b) {return b.point - a.point});

	return res.status(200).json(result.slice(0,maxCnt));
}


// user : 조회사용자, users : 가까운 시터목록, maxCnt : 조회갯수, objDistance : email,distance 객체, sortGubun : 정렬기준
var getParentMatchList = function(user, users, maxCnt, objDistance, sortGubun, req, res) {

	var result = [];

	var scheduleRate = 7;	// 스케쥴 비중 	70%
	var distRate = 2;	// 거리 비중 	20%
	var salaryRate = 1;	// 시급 비중 	10%

	var week = ["mon","tue","wed","thu","fri","sat","sun"];

	var distTable = [0, 0.5, 2, 5, 10, 15, 20, 30];
	var distValue = [10,9.5, 9, 8,6.5,  5,  3,  1];

	var salTable = [-10000,-5000,-2000,0,1000,2000,3000,5000,7000,10000];
	var salValue = [10,        9,    8,7,   6,   5,   4,   3,   2,    1];

	var targetCnt, matchCnt;

//	var today = new Date();
//	var thisYear = today.getFullYear();
//	var thisDate = (today.getMonth()+1)*100+today.getDate();

	sortGubun = (sortGubun==null)?"point":sortGubun;

	logger.info('people number:', users.length);
//	logger.info('thisYear:', thisYear);
//	logger.info('thisDate:', thisDate);

	for (var i=0;i<users.length;i++) {

		targetCnt=0.0;
		matchCnt=0.0;

		var currentUser = {
			email:users[i].personal_info.email,
			name:users[i].personal_info.name,
			addr:users[i].personal_info.addr1,
			age:0,
			timeMatch:0,
			distance:0,
			distPoint:0,
			salary:users[i].parent_info.salary,
			point:0
		};
/*
		var age = today.getFullYear() - Math.floor(users[i].personal_info.birth_date/10000);
		if (thisDate<users[i].personal_info.birth_date%1000) age--;
		currentUser.age = age;
*/

//		currentUser.distance = objDistance.get(users[i].personal_info.email);

		for (var y=0;y<week.length;y++) {
			for (var z=0;z<7;z++) {
//logger.info('schedule String : ', eval("user.parent_info."+week[y]));
//logger.info('schedule String : ', eval("users["+i+"].sitter_info."+week[y]));
//logger.info('schedule String : ', eval("user.parent_info."+week[y]).charAt(z) );
				if (eval("user.sitter_info."+week[y]).charAt(z)=='1') {
					targetCnt++;
					if (eval("users["+i+"].parent_info."+week[y]).charAt(z)=='1') matchCnt++;
				}
			}
		}

		currentUser.distance = (objDistance[users[i].personal_info.email]).distance;

		for (var y=0;y<distTable.length;y++) 
			if (currentUser.distance < distTable[y]) {
				currentUser.distPoint = distValue[y-1] - (((currentUser.distance-distTable[y-1])/(distTable[y]-distTable[y-1]))*(distValue[y-1]-distValue[y]));
				currentUser.point +=  currentUser.distPoint * distRate;
				break;
			}

		if ( currentUser.salary == 0 || user.parent_info.salary == 0 ) // 둘중 하나의 시급정보가 협의일 경우 시급동일로 판단
			currentUser.point += 7;
		else {
			for (var y=0;y<salTable.length;y++) 
				if (currentUser.salary - user.sitter_info.salary <= salTable[y]) {
					currentUser.point += salValue[y] * salaryRate;
					break;
				}
		}


//	logger.info('matchCnt:', matchCnt);
//	logger.info('targetCnt:', targetCnt);
		currentUser.timeMatch = (matchCnt/targetCnt) * 10;
		currentUser.point += currentUser.timeMatch * scheduleRate;

//0 : 협의
//6000 :  6,000원
//7000 : 7,000원
//8000 : 8,000원 : Default
//9000 : 9,000원
//10000 : 10,000원
//12000 : 12,000원
//15000 : 15,000원
//1500000 : 150만원
//2300000 : 230만원

		result.push(currentUser);
	}

	if ( sortGubun=="distance") 	// Nearest first
		result.sort(function (a,b) {return a.distance - b.distance});
	else if ( sortGubun=="salary") 	// Cheapest first
		result.sort(function (a,b) {return b.salary - a.salary});
	else				// Best Match - point first
		result.sort(function (a,b) {return b.point - a.point});

	return res.status(200).json(result.slice(0,maxCnt));
}

//Generates hash using bCrypt
var createHash = function(password){
	return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);
};
